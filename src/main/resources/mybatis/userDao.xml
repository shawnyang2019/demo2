<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fiberhome.dao.UserDao">
    <!--<insert  id="insertAuthor"   parameterType="domain.blog.Author"  flushCache="true"  statementType="PREPARED"-->
    <!--keyProperty=""   useGeneratedKeys=""  timeout="20000">-->
    <!--<update  id="insertAuthor"  parameterType="domain.blog.Author" flushCache="true"  statementType="PREPARED"  timeout="20000">-->
    <!--<delete  id="insertAuthor"  parameterType="domain.blog.Author"  flushCache="true"  statementType="PREPARED"  timeout="20000">-->
    <!--id:在命名空间中唯一的标识符，可以被用来引用这条语句。相当于引用语句中的方法名-->
    <!--parameterType:将会传入这条语句的参数类的完全限定名或别名。-->
    <!--flushCache将其设置为 true，不论语句什么时候被调用，都会导致缓存被清空。默认值： false。-->
    <!--resultType:从这条语句中返回的期望类型的类的完全限定名或别名。注意集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。
     resultMap:命名引用外部的 resultMap。返回 map 是 MyBatis 最具力量的特性，对其有一个很好的理解的话，许多复杂映射的情形就能被解决了。
     使用 resultMap 或 resultType，但不能同时使用。-->
    <!--timeout:这个设置驱动程序等待数据库返回请求结果，并抛出异常时间的最大等待值。默认不设置（驱动自行处理）。-->
    <!--statementType:STATEMENT,PREPARED 或 CALLABLE 的一种。这会让 MyBatis使用选择使用 Statement， PreparedStatement 或 CallableStatement。默认值： PREPARED。-->
    <!--userGeneratedKeys:（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys 方法来取出由数据（比如：像 MySQL 和 SQL Server 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。-->
    <!--keyProperty：（仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。-->
    <select id="getUser" parameterType="long" resultType="user">
        select id,username,password,salt,email,createTime
        from `user`
		where id = #{id}
	</select>

    <select id="getUserByName" resultType="user">
        select id,username,password,salt,email,createTime
        from `user`
        where username = #{0}
    </select>

    <insert id="addUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        insert into `user`
        ( username,password,salt,email,createTime)
        values
        (
        #{username},
        #{password},
        #{salt,jdbcType=VARCHAR},
        #{email,jdbcType=VARCHAR},
        #{createTime,jdbcType=DATE}
        )
    </insert>

    <delete id="deleteUser" parameterType="long">
		delete from `user` where id=#{userId}
	</delete>

    <update id="updateUser">
        update `user`
        <trim prefix="set" suffixOverrides=",">
            <if test="username != null ">username=#{username},</if>
            <if test="password != null ">password=#{password},</if>
            <if test="salt != null ">salt=#{salt},</if>
            <if test="email != null ">email=#{email},</if>
            <if test="createTime != null ">createTime=#{createTime},</if>
        </trim>
        where id=#{id}
    </update>

    <select id="getUsers" parameterType="user" resultType="user">
        select id,username,password,salt,email,createTime from `user`
        <trim prefix="where" prefixOverrides="and">
            <if test="id != null ">and id=#{id}</if>
            <if test="username != null ">and username=#{username}</if>
            <if test="password != null ">and password=#{password}</if>
        </trim>
    </select>

    <insert id="addBatchUsers" parameterType="list" useGeneratedKeys="true">
        <selectKey resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

        insert into `user` ( id,username,password,salt,email,createTime)
        values
        <foreach collection="list" item="e" index="index" separator=",">
            (
            #{e.username,jdbcType=VARCHAR},
            #{e.password,jdbcType=VARCHAR},
            #{e.salt,jdbcType=VARCHAR},
            #{e.email,jdbcType=VARCHAR},
            #{e.createTime,jdbcType=DATE}
            )
        </foreach>
    </insert>

    <delete id="deleteBatchUsers">
        delete from `user` where id in
        <foreach collection="list" item="u" index="index" open="(" separator="," close=")">
            #{u.id}
        </foreach>
    </delete>

</mapper>